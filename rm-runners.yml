---
# Purpose: to delete the github custom runner entry for this server
- name: Runner Playbook to remove VM to Github custom runner
  hosts: all
  become: true
  gather_facts: true
  ignore_unreachable: true
  tasks:
    - name: validate runnerNames
      loop: "{{ RunnerName }}"
      tags: ["all"]
      ansible.builtin.assert:
        that: "'{{ item }}' | regex_search('^[\\w-]+$')"
        success_msg: "Variable is valid"
        fail_msg: "Variable is not valid"

    - name: Ping my hosts
      tags: ["all"]
      ansible.builtin.ping:

    - name: Check .credentials are already present or not
      loop: "{{RunnerName}}"
      ansible.builtin.stat: path="/home/{{ item }}/actions-runner/.credentials"
      tags: ["all"]
      register: credentials_exist

    - name: Set fact to determine if any credentials are missing
      tags: ["all"]
      set_fact:
        having_credentials_runners: "{{ credentials_exist.results | selectattr('stat.exists', 'equalto', true) | map(attribute='item') | list }}"

    - name: generate registration_token curl
      tags: ["all"]
      when: (having_credentials_runners | length > 0) and not('use_reg_token' in ansible_run_tags)

      ansible.builtin.uri:
        url: "https://api.github.com/orgs/{{ OrganizationName }}/actions/runners/registration-token"
        follow_redirects: all
        method: POST
        body_format: "json"
        status_code: [201]
        return_content: true
        headers:
          Accept: "application/vnd.github+json"
          Authorization: "Bearer {{ lookup('ansible.builtin.env', 'GH_TOKEN') }}"
          X-GitHub-Api-Version: "2022-11-28"
      register: _result_registration_token
      until: _result_registration_token.status == 201

    - name: set variable to store registration_token
      tags: ["all"]
      when: (having_credentials_runners | length > 0) and not('use_reg_token' in ansible_run_tags)
      ansible.builtin.set_fact:
        gh_reg_token: "{{ (_result_registration_token.content | from_json).token }}"

    - name: set variable registration_token using user input
      tags: ["all"]
      when: (having_credentials_runners | length > 0) and ('use_reg_token' in ansible_run_tags)
      ansible.builtin.set_fact:
        gh_reg_token: "{{ lookup('ansible.builtin.env', 'ORG_REGISTRATION_TOKEN') }}"


    - name: uninstall the service
      when: having_credentials_runners | length > 0
      tags: ["all"]
      loop: "{{ having_credentials_runners }}"
      shell: |
        sudo su - "{{ item }}" -c "cd ~/actions-runner && sudo ./svc.sh uninstall"

    - name: command to remove the runner from github
      when: having_credentials_runners | length > 0
      tags: ["all"]
      loop: "{{ having_credentials_runners }}"
      shell: |
        sudo su - "{{ item }}" -c "cd ~/actions-runner && ./config.sh remove --url https://github.com/{{ OrganizationName }} --token {{ gh_reg_token }} --unattended"

    - name: remove user
      loop: "{{RunnerName}}"
      tags: ["all"]
      ansible.builtin.user:
        name: "{{ item }}"
        state: absent
        force: true
    - name: remove all the data
      loop: "{{RunnerName}}"
      tags: ["all"]
      ansible.builtin.file:
        path: "/home/{{ item }}"
        state: absent
        force: true

    - name: remove entries for sudoers
      loop: "{{RunnerName}}"
      tags: ["all"]
      ansible.builtin.file:
        path: "/etc/sudoers.d/{{ item }}"
        state: absent
        force: true
